{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n\n// Create axios instance with base configuration\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor to include auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('access_token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Add response interceptor to handle token refresh\napi.interceptors.response.use(response => response, async error => {\n  var _error$response;\n  const originalRequest = error.config;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      const refreshToken = localStorage.getItem('refresh_token');\n      if (refreshToken) {\n        const response = await axios.post(`${API_URL}/auth/refresh`, {\n          refresh_token: refreshToken\n        });\n        const {\n          access_token\n        } = response.data;\n        localStorage.setItem('access_token', access_token);\n\n        // Retry the original request\n        originalRequest.headers.Authorization = `Bearer ${access_token}`;\n        return api(originalRequest);\n      }\n    } catch (refreshError) {\n      // If refresh fails, redirect to login\n      localStorage.removeItem('access_token');\n      localStorage.removeItem('refresh_token');\n      window.location.href = '/login';\n    }\n  }\n  return Promise.reject(error);\n});\nexport const authService = {\n  async login(username, password) {\n    const response = await api.post('/auth/login', {\n      username,\n      password\n    });\n    return response.data;\n  },\n  async register(userData) {\n    const response = await api.post('/auth/register', userData);\n    return response.data;\n  },\n  async getProfile() {\n    const response = await api.get('/auth/profile');\n    return response.data;\n  },\n  async updateProfile(data) {\n    const response = await api.put('/auth/profile', data);\n    return response.data.user;\n  },\n  async changePassword(currentPassword, newPassword) {\n    const response = await api.post('/auth/change-password', {\n      current_password: currentPassword,\n      new_password: newPassword\n    });\n    return response.data;\n  },\n  logout() {\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('refresh_token');\n  }\n};","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","originalRequest","status","_retry","refreshToken","post","refresh_token","access_token","data","setItem","refreshError","removeItem","window","location","href","authService","login","username","password","register","userData","getProfile","get","updateProfile","put","user","changePassword","currentPassword","newPassword","current_password","new_password","logout"],"sources":["/Users/jacquelinewallace/Desktop/weather_tracker/frontend/src/services/authService.ts"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n\n// Create axios instance with base configuration\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add request interceptor to include auth token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('access_token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Add response interceptor to handle token refresh\napi.interceptors.response.use(\n  (response) => response,\n  async (error) => {\n    const originalRequest = error.config;\n\n    if (error.response?.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n\n      try {\n        const refreshToken = localStorage.getItem('refresh_token');\n        if (refreshToken) {\n          const response = await axios.post(`${API_URL}/auth/refresh`, {\n            refresh_token: refreshToken,\n          });\n\n          const { access_token } = response.data;\n          localStorage.setItem('access_token', access_token);\n\n          // Retry the original request\n          originalRequest.headers.Authorization = `Bearer ${access_token}`;\n          return api(originalRequest);\n        }\n      } catch (refreshError) {\n        // If refresh fails, redirect to login\n        localStorage.removeItem('access_token');\n        localStorage.removeItem('refresh_token');\n        window.location.href = '/login';\n      }\n    }\n\n    return Promise.reject(error);\n  }\n);\n\nexport interface LoginResponse {\n  access_token: string;\n  refresh_token: string;\n  user: {\n    id: number;\n    username: string;\n    email: string;\n    first_name?: string;\n    last_name?: string;\n  };\n}\n\nexport interface RegisterData {\n  username: string;\n  email: string;\n  password: string;\n  first_name?: string;\n  last_name?: string;\n}\n\nexport const authService = {\n  async login(username: string, password: string): Promise<LoginResponse> {\n    const response = await api.post('/auth/login', { username, password });\n    return response.data;\n  },\n\n  async register(userData: RegisterData): Promise<LoginResponse> {\n    const response = await api.post('/auth/register', userData);\n    return response.data;\n  },\n\n  async getProfile() {\n    const response = await api.get('/auth/profile');\n    return response.data;\n  },\n\n  async updateProfile(data: Partial<{\n    first_name: string;\n    last_name: string;\n    email: string;\n  }>) {\n    const response = await api.put('/auth/profile', data);\n    return response.data.user;\n  },\n\n  async changePassword(currentPassword: string, newPassword: string) {\n    const response = await api.post('/auth/change-password', {\n      current_password: currentPassword,\n      new_password: newPassword,\n    });\n    return response.data;\n  },\n\n  logout() {\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('refresh_token');\n  },\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;;AAE5E;AACA,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN,OAAO;EAChBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;EAClD,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAZ,GAAG,CAACI,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC1BS,QAAQ,IAAKA,QAAQ,EACtB,MAAOH,KAAK,IAAK;EAAA,IAAAI,eAAA;EACf,MAAMC,eAAe,GAAGL,KAAK,CAACL,MAAM;EAEpC,IAAI,EAAAS,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBE,MAAM,MAAK,GAAG,IAAI,CAACD,eAAe,CAACE,MAAM,EAAE;IAC7DF,eAAe,CAACE,MAAM,GAAG,IAAI;IAE7B,IAAI;MACF,MAAMC,YAAY,GAAGX,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC;MAC1D,IAAIU,YAAY,EAAE;QAChB,MAAML,QAAQ,GAAG,MAAMpB,KAAK,CAAC0B,IAAI,CAAC,GAAGzB,OAAO,eAAe,EAAE;UAC3D0B,aAAa,EAAEF;QACjB,CAAC,CAAC;QAEF,MAAM;UAAEG;QAAa,CAAC,GAAGR,QAAQ,CAACS,IAAI;QACtCf,YAAY,CAACgB,OAAO,CAAC,cAAc,EAAEF,YAAY,CAAC;;QAElD;QACAN,eAAe,CAACd,OAAO,CAACQ,aAAa,GAAG,UAAUY,YAAY,EAAE;QAChE,OAAOvB,GAAG,CAACiB,eAAe,CAAC;MAC7B;IACF,CAAC,CAAC,OAAOS,YAAY,EAAE;MACrB;MACAjB,YAAY,CAACkB,UAAU,CAAC,cAAc,CAAC;MACvClB,YAAY,CAACkB,UAAU,CAAC,eAAe,CAAC;MACxCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;IACjC;EACF;EAEA,OAAOjB,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAsBD,OAAO,MAAMmB,WAAW,GAAG;EACzB,MAAMC,KAAKA,CAACC,QAAgB,EAAEC,QAAgB,EAA0B;IACtE,MAAMnB,QAAQ,GAAG,MAAMf,GAAG,CAACqB,IAAI,CAAC,aAAa,EAAE;MAAEY,QAAQ;MAAEC;IAAS,CAAC,CAAC;IACtE,OAAOnB,QAAQ,CAACS,IAAI;EACtB,CAAC;EAED,MAAMW,QAAQA,CAACC,QAAsB,EAA0B;IAC7D,MAAMrB,QAAQ,GAAG,MAAMf,GAAG,CAACqB,IAAI,CAAC,gBAAgB,EAAEe,QAAQ,CAAC;IAC3D,OAAOrB,QAAQ,CAACS,IAAI;EACtB,CAAC;EAED,MAAMa,UAAUA,CAAA,EAAG;IACjB,MAAMtB,QAAQ,GAAG,MAAMf,GAAG,CAACsC,GAAG,CAAC,eAAe,CAAC;IAC/C,OAAOvB,QAAQ,CAACS,IAAI;EACtB,CAAC;EAED,MAAMe,aAAaA,CAACf,IAIlB,EAAE;IACF,MAAMT,QAAQ,GAAG,MAAMf,GAAG,CAACwC,GAAG,CAAC,eAAe,EAAEhB,IAAI,CAAC;IACrD,OAAOT,QAAQ,CAACS,IAAI,CAACiB,IAAI;EAC3B,CAAC;EAED,MAAMC,cAAcA,CAACC,eAAuB,EAAEC,WAAmB,EAAE;IACjE,MAAM7B,QAAQ,GAAG,MAAMf,GAAG,CAACqB,IAAI,CAAC,uBAAuB,EAAE;MACvDwB,gBAAgB,EAAEF,eAAe;MACjCG,YAAY,EAAEF;IAChB,CAAC,CAAC;IACF,OAAO7B,QAAQ,CAACS,IAAI;EACtB,CAAC;EAEDuB,MAAMA,CAAA,EAAG;IACPtC,YAAY,CAACkB,UAAU,CAAC,cAAc,CAAC;IACvClB,YAAY,CAACkB,UAAU,CAAC,eAAe,CAAC;EAC1C;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}